{"version":3,"sources":["Component/Topbar.jsx","Component/Cards.jsx","Component/Footer.jsx","Config/CarProps.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","DenseAppBar","classes","className","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Typography","Cards","props","style","width","src","imgsrc","alt","imgalt","title","price","href","weblink","target","Footer","CarProps","App","Fragment","map","value","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAQMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,QAIhB,SAASC,IACtB,IAAMC,EAAUT,IAEhB,OACE,yBAAKU,UAAWD,EAAQN,MACtB,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACf,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,UAAWD,EAAQJ,WAAYY,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYL,QAAQ,KAAKG,MAAM,WAA/B,a,MCPKG,MAjBf,SAAeC,GACX,OACI,yBAAKX,UAAU,WACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,OAAOY,MAAO,CAACC,MAAO,UACjC,yBAAKC,IAAKH,EAAMI,OAAQf,UAAU,eAAegB,IAAKL,EAAMM,SAC5D,yBAAKjB,UAAU,aACX,wBAAIA,UAAU,cAAcW,EAAMO,OAClC,uBAAGlB,UAAU,aAAaW,EAAMQ,OAChC,uBAAGC,KAAMT,EAAMU,QAASC,OAAO,SAAStB,UAAU,mBAAlD,sBCJTuB,MANf,WACI,OACI,yBAAKvB,UAAU,UAAf,qBCyCOwB,EA7CE,CACb,CACIT,OAAO,oBACPE,OAAO,cACPC,MAAM,mBACNC,MAAM,iBACNE,QAAQ,0IAEZ,CACIN,OAAO,uBACPE,OAAO,eACPC,MAAM,oBACNC,MAAM,iBACNE,QAAQ,0DAEZ,CACIN,OAAO,sBACPE,OAAO,iBACPC,MAAM,sBACNC,MAAM,iBACNE,QAAQ,mCAEZ,CACIN,OAAO,uBACPE,OAAO,gBACPC,MAAM,qBACNC,MAAM,iBACNE,QAAQ,uFAEZ,CACIN,OAAO,qBACPE,OAAO,iBACPC,MAAM,sBACNC,MAAM,iBACNE,QAAQ,yCAEZ,CACIN,OAAO,mBACPE,OAAO,YACPC,MAAM,gBACNC,MAAM,iBACNE,QAAQ,gCCTDI,MAzBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,yBAAK1B,UAAU,WACb,qDAEF,yBAAKA,UAAU,WACZwB,EAASG,KAAI,SAACC,EAAOC,GACpB,OACE,kBAAC,EAAD,CAAOC,IAAKD,EACZd,OAAUa,EAAMb,OAChBE,OAAUW,EAAMX,OAChBC,MAASU,EAAMV,MACfC,MAASS,EAAMT,MACfE,QAAWO,EAAMP,cAKzB,kBAAC,EAAD,QCfgBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52d1d4d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function DenseAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            Photos\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Cards(props) {\r\n    return(\r\n        <div className=\"styling\">\r\n            <div className=\"card mianCardDiv\">\r\n                <div className=\"card\" style={{width: '18rem'}}>\r\n                    <img src={props.imgsrc} className=\"card-img-top\" alt={props.imgalt} />\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{props.title}</h5>\r\n                        <p className=\"card-text\">{props.price}</p>\r\n                        <a href={props.weblink} target='_blank' className=\"btn btn-primary\">Visit Website</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return(\r\n        <div className=\"footer\">your footer here</div>\r\n    );\r\n}\r\n\r\nexport default Footer;","const CarProps = [\r\n    {\r\n        imgsrc:\"/images/Civic.jpg\", \r\n        imgalt:\"Honda Civic\",\r\n        title:\"Honda Civic 2020\",\r\n        price:\"40 Lac Rs Only\",\r\n        weblink:\"https://www.honda.com.my/model/civic?gclid=CjwKCAjww5r8BRB6EiwArcckCzuBEApI3qtbwKWkKnw8tsVJxAgteNTkKqB_FASf4XH3ijMu7Pvv4RoCGEMQAvD_BwE\"             \r\n    },\r\n    {\r\n        imgsrc:\"/images/Sportage.jpg\", \r\n        imgalt:\"Kia Sportage\",\r\n        title:\"Kia Sportage 2020\",\r\n        price:\"65 Lac Rs Only\",\r\n        weblink:\"https://www.kia.com/pk/showroom/sportage/features.html\"\r\n    },\r\n    {\r\n        imgsrc:\"/images/Corolla.jpg\", \r\n        imgalt:\"Toyota Corolla\",\r\n        title:\"Toyota Corolla 2020\",\r\n        price:\"36 Lac Rs Only\",\r\n        weblink:\"https://www.toyota.com/corolla/\"             \r\n    },\r\n    {\r\n        imgsrc:\"/images/Mercedes.jpg\", \r\n        imgalt:\"Mercedes Benz\",\r\n        title:\"Mercedes Benz 2020\",\r\n        price:\"75 Lac Rs Only\",\r\n        weblink:\"https://www.mercedesbenzoffortmitchell.com/upcoming-mercedes-benz-vehicle-releases/\"             \r\n    },\r\n    {\r\n        imgsrc:\"/images/Tucson.jpg\", \r\n        imgalt:\"Hyundai Tucson\",\r\n        title:\"Hyundai Tucson 2020\",\r\n        price:\"56 Lac Rs Only\",\r\n        weblink:\"https://www.hyundai-nishat.com/tucson\"             \r\n    },\r\n    {\r\n        imgsrc:\"/images/Audi.jpg\", \r\n        imgalt:\"Audi RS 7\",\r\n        title:\"Audi RS7 2020\",\r\n        price:\"56 Lac Rs Only\",\r\n        weblink:\"audi.com.pk/sea/web/pk.html\"             \r\n    }\r\n];\r\n\r\nexport default CarProps;","import React from 'react';\nimport './App.css';\nimport Topbar from './Component/Topbar.jsx'\nimport Cards from './Component/Cards.jsx'\nimport Footer from './Component/Footer.jsx'\nimport CarProps from './Config/CarProps.jsx'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Topbar />\n      <div className=\"heading\">\n        <h1>Top cars in Pakistan</h1>\n      </div>\n      <div className=\"cardDiv\">\n        {CarProps.map((value, index) => {\n          return(\n            <Cards key={index}\n            imgsrc = {value.imgsrc}\n            imgalt = {value.imgalt}\n            title = {value.title}\n            price = {value.price}\n            weblink = {value.weblink}\n            />\n          )\n        })}\n      </div>\n    <Footer />\n    </ React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}